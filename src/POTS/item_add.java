package POTS;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class item_add extends javax.swing.JFrame {

    /**
     * Creates new form item_add
     */
    public item_add() {
        setTitle("Add New Item"); //setting the title for the form
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); //setting a default close operation
        setLayout(null);
        
        initComponents();
        
        //save button action
        saveButton.addActionListener(e -> {
            if (validateInput()) {
                String itemName = nameField.getText();
                String itemId = idField.getText();
                String quantity = qtyField.getText();
                String price = priceField.getText();

                //write item to the file
                try (BufferedWriter writer = new BufferedWriter(new FileWriter("item_inventory.txt", true))) {
                    writer.write(itemId + "," + itemName + "," + quantity + "," + price);
                    writer.newLine();
                    JOptionPane.showMessageDialog(null, "Item Added Successfully!");
                    clearFields();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Error writing to file: " + ex.getMessage());
                }
            }
        });

        cancelButton.addActionListener(e -> dispose()); //action for cancel button
    }

    private boolean validateInput() {
        String itemName = nameField.getText().trim();
        String itemId = idField.getText().trim();
        String quantity = qtyField.getText().trim();
        String price = priceField.getText().trim();

        //validate Item Name
        if (itemName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Item Name is required.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!itemName.matches("[a-zA-Z\\s]+")) {
            JOptionPane.showMessageDialog(this, "Item Name should contain only letters and spaces.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //validate Item ID
        if (itemId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Item ID is required.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!itemId.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Item ID should be numeric.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //validate Quantity
        if (quantity.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Quantity is required.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!quantity.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Quantity should be numeric.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (Integer.parseInt(quantity) <= 0) {
            JOptionPane.showMessageDialog(this, "Quantity must be greater than zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //validate Price
        if (price.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Price is required.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!price.matches("\\d+(\\.\\d{1,2})?")) {
            JOptionPane.showMessageDialog(this, "Price should be a valid number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (Double.parseDouble(price) <= 0) {
            JOptionPane.showMessageDialog(this, "Price must be greater than zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    private void clearFields() {
        nameField.setText("");
        idField.setText("");
        qtyField.setText("");
        priceField.setText("");
    }

    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        priceLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        idField = new javax.swing.JTextField();
        qtyField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        qtyLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        priceLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        priceLabel.setText("Price:");

        nameField.setToolTipText("");
        nameField.setActionCommand("<Not Set>");

        saveButton.setBackground(new java.awt.Color(153, 153, 153));
        saveButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        saveButton.setForeground(new java.awt.Color(255, 255, 255));
        saveButton.setText("SAVE");

        cancelButton.setBackground(new java.awt.Color(153, 153, 153));
        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("CANCEL");

        nameLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        nameLabel.setText("Item Name:");

        idLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        idLabel.setText("Item ID:");

        qtyLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        qtyLabel.setText("Quantity:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(saveButton)
                        .addGap(27, 27, 27)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(qtyLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(priceLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(idField)
                            .addComponent(priceField)
                            .addComponent(qtyField)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idLabel))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qtyLabel)
                    .addComponent(qtyField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addGap(66, 66, 66))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(item_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(item_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(item_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(item_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new item_add().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField qtyField;
    private javax.swing.JLabel qtyLabel;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
