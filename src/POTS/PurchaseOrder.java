package POTS;

import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.util.List;

public class PurchaseOrder extends javax.swing.JFrame {

    /**
     * Creates new form PurchaseOrder
     */
    public PurchaseOrder() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_edit = new javax.swing.JButton();
        btn_add = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_close = new javax.swing.JButton();
        btn_view = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_po = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_edit.setBackground(new java.awt.Color(153, 153, 153));
        btn_edit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_edit.setForeground(new java.awt.Color(255, 255, 255));
        btn_edit.setText("Edit");
        btn_edit.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_add.setBackground(new java.awt.Color(153, 153, 153));
        btn_add.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_add.setForeground(new java.awt.Color(255, 255, 255));
        btn_add.setText("Add");
        btn_add.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_delete.setBackground(new java.awt.Color(153, 153, 153));
        btn_delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_delete.setForeground(new java.awt.Color(255, 255, 255));
        btn_delete.setText("Delete");
        btn_delete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_close.setBackground(new java.awt.Color(255, 204, 0));
        btn_close.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_close.setText("Close");
        btn_close.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });

        btn_view.setBackground(new java.awt.Color(153, 153, 153));
        btn_view.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_view.setForeground(new java.awt.Color(255, 255, 255));
        btn_view.setText("View All");
        btn_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_viewActionPerformed(evt);
            }
        });

        tbl_po.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PO_ID", "Item_ID", "Date", "Status"
            }
        ));
        jScrollPane1.setViewportView(tbl_po);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Purchase Order");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/POTS/purchase_7078316 (1).png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(182, 182, 182))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_view, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(btn_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_close, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_view, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btn_close, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        // Get the selected row index from the table
int selectedRow = tbl_po.getSelectedRow();

// If no row is selected, show a message to select a row
if (selectedRow == -1) {
    JOptionPane.showMessageDialog(this, "Please select a row to edit.",
        "Selection Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// Get the current values from the selected row in the table
String currentPoId = tbl_po.getValueAt(selectedRow, 0).toString();  // PO ID
String currentPmId = tbl_po.getValueAt(selectedRow, 1).toString();  // Purchase Manager ID
String currentPrId = tbl_po.getValueAt(selectedRow, 2).toString();  // PR ID
String currentStatus = tbl_po.getValueAt(selectedRow, 3).toString();  // Status

// Show input dialogs to allow the user to edit the selected values
String newPoId = JOptionPane.showInputDialog(this, "Enter PO ID:", currentPoId);
if (newPoId == null) return;  // If user presses Cancel, exit

String newPmId = JOptionPane.showInputDialog(this, "Enter Item ID:", currentPmId);
if (newPmId == null) return;

String newPrId = JOptionPane.showInputDialog(this, "Enter Date:", currentPrId);
if (newPrId == null) return;

// Status will always be "Pending"
String newStatus = "Pending";

// Update the row in the table with the new values
tbl_po.setValueAt(newPoId, selectedRow, 0);
tbl_po.setValueAt(newPmId, selectedRow, 1);
tbl_po.setValueAt(newPrId, selectedRow, 2);
tbl_po.setValueAt(newStatus, selectedRow, 3);

// Now, we need to update the file to reflect the changes in the table
String filePath = "PurchaseOrder.txt";  // Specify your file path

try {
    // Read the content of the file
    Path path = Paths.get(filePath);
    List<String> lines = Files.readAllLines(path);

    // StringBuilder to store the updated file content
    StringBuilder updatedContent = new StringBuilder();

    boolean inPoSection = false;
    boolean updatedEntry = false;

    // Iterate over all lines in the file
    for (String lineInFile : lines) {
        // If we are in the PO section, check if it's the line that needs to be updated
        if (lineInFile.contains("# Purchase Order (PO) Data")) {
            inPoSection = true;  // Enter PO section
            updatedContent.append(lineInFile).append(System.lineSeparator());
            continue;
        }

        if (inPoSection) {
            // Skip the header line for PO Data (no need to modify it)
            if (lineInFile.contains("PO ID, Purchase Manager ID, PR ID, Status")) {
                updatedContent.append(lineInFile).append(System.lineSeparator());
                continue;
            }

            // Check if the line matches the current PO ID to be updated
            String[] columns = lineInFile.split(", ");
            if (columns.length >= 4 && columns[0].equals(currentPoId)) {
                // This is the line to update
                String updatedLine = newPoId + ", " + newPmId + ", " + newPrId + ", " + newStatus;
                updatedContent.append(updatedLine).append(System.lineSeparator());
                updatedEntry = true;  // Flag to indicate that the entry was updated
            } else {
                // If the line doesn't match, just append it as is
                updatedContent.append(lineInFile).append(System.lineSeparator());
            }
        } else {
            // If we are not in the PO section, just add the line to the updated content
            updatedContent.append(lineInFile).append(System.lineSeparator());
        }
    }

    // Check if the entry was updated, and if so, write back the modified content
    if (updatedEntry) {
        Files.write(path, updatedContent.toString().getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        JOptionPane.showMessageDialog(this, "PO entry updated successfully.");
    } else {
        JOptionPane.showMessageDialog(this, "PO entry not found for update.");
    }

} catch (IOException e) {
    // Show error message if there's an exception
    JOptionPane.showMessageDialog(this, "Error reading or writing to the file: " + e.getMessage(),
        "Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();  // Print stack trace to console for debugging
}

    }//GEN-LAST:event_btn_editActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        // Variables to store the input values
String poId = null, pmId = null, prId = null;
String status = "Pending";  // Status is always set to "Pending"

// PO ID input with validation
poId = getInputWithValidation("Enter PO ID:");
if (poId == null) return;  // If user cancels, exit

// Purchase Manager ID input with validation
pmId = getInputWithValidation("Enter Item ID:");
if (pmId == null) return;  // If user cancels, exit

// PR ID input with validation
prId = getInputWithValidation("Enter Date:");
if (prId == null) return;  // If user cancels, exit

// Create the line to be added in the file (status is automatically "Pending")
String newPoEntry = poId + ", " + pmId + ", " + prId + ", " + status;

// Specify the file path (correct path provided by the user)
String filePath = "PurchaseOrder.txt"; // Updated file path to managertxt.txt

try {
    // Read the content of the file to check for the "Purchase Order" section
    Path path = Paths.get(filePath);
    List<String> lines = Files.readAllLines(path);

    // StringBuilder to store the updated file content
    StringBuilder updatedContent = new StringBuilder();

    // Flags
    boolean inPoSection = false;
    boolean addedNewEntry = false;
    String lastPoLine = "";  // To store the last PO line found

    // Iterate over all lines
    for (String lineInFile : lines) {
        // Add the current line to the updated content
        updatedContent.append(lineInFile).append(System.lineSeparator());

        // Check if we are starting the "PO Data" section
        if (lineInFile.contains("# Purchase Order (PO) Data")) {
            inPoSection = true;
        }

        // Skip the header inside PO section (avoid duplication)
        if (inPoSection && lineInFile.contains("PO ID, Purchase Manager ID, PR ID, Status")) {
            continue;  // Skip this header line
        }

        // Identify the last PO entry by checking the line that starts with "po"
        if (inPoSection && lineInFile.trim().startsWith("po")) {
            lastPoLine = lineInFile;  // Store the last PO entry
        }

        // Check for footer line and stop adding more lines to PO section
        if (lineInFile.contains("------------------------------------------------------------") && inPoSection) {
            inPoSection = false; // End of PO section
        }
    }

    // After the loop, insert the new PO entry after the last PO entry
    if (!lastPoLine.isEmpty() && !addedNewEntry) {
        updatedContent.insert(updatedContent.lastIndexOf(lastPoLine) + lastPoLine.length() + 1, newPoEntry + System.lineSeparator());
        addedNewEntry = true;  // Ensure the new entry is added only once
    }

    // Show confirmation dialog with Save and Cancel options
    int result = JOptionPane.showConfirmDialog(this,
        "Do you want to save the changes?", "Confirm Save", JOptionPane.YES_NO_OPTION);

    // If user clicks Save (YES), write the updated content back to the file
    if (result == JOptionPane.YES_OPTION) {
        Files.write(path, updatedContent.toString().getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        JOptionPane.showMessageDialog(this, "Data saved successfully!");
    } else {
        JOptionPane.showMessageDialog(this, "Changes were not saved.");
    }

} catch (IOException e) {
    // Show error message if there's an exception
    JOptionPane.showMessageDialog(this, "Error reading or writing to the file: " + e.getMessage(),
        "Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();  // Print stack trace to console for debugging
}


        }

        // Helper method to handle input with validation
        private String getInputWithValidation(String message) {
            String input = null;
            while (input == null || input.isEmpty()) {
                input = JOptionPane.showInputDialog(this, message);
                if (input == null) {  // User pressed Cancel, exit the method
                    return null;
                }
                if (input.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "This field cannot be empty. Please enter a value.",
                        "Input Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            return input;  // Return the valid input
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed

        // Get the selected row index from the table
        int selectedRow = tbl_po.getSelectedRow();

        // If no row is selected, show a message to select a row
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.",
                "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Show a confirmation dialog to ask if the user is sure
        int confirmDelete = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete this PO entry?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION);

        // If the user clicks "Yes", proceed with the deletion
        if (confirmDelete == JOptionPane.YES_OPTION) {
            // Get the PO ID of the selected row to delete from the table
            String poIdToDelete = tbl_po.getValueAt(selectedRow, 0).toString();

            // Remove the selected row from the table
            ((DefaultTableModel) tbl_po.getModel()).removeRow(selectedRow);

            // Show confirmation message
            JOptionPane.showMessageDialog(this, "PO entry deleted from the table.");

            // File path to the file (managertxt.txt)
            String filePath = "PurchaseOrder.txt";

            // Read the current contents of the file
            StringBuilder fileContent = new StringBuilder();

            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
                String line;
                boolean readPO = false;

                // Read file line by line
                while ((line = br.readLine()) != null) {
                    line = line.trim();

                    // Detect the start of the Purchase Order section
                    if (line.equalsIgnoreCase("# Purchase Order (PO) Data")) {
                        readPO = true;
                        fileContent.append(line).append("\n");
                        continue;
                    }

                    // Detect the delimiter line that ends the PO section
                    if (readPO && line.startsWith("------------------------------------------------------------")) {
                        fileContent.append(line).append("\n");
                        continue;
                    }

                    // Process lines inside the PO section
                    if (readPO && !line.isEmpty()) {
                        String[] data = line.split(",\\s*");

                        if (data.length == 4) {
                            // If the PO ID matches, skip this line (delete the entry)
                            if (!data[0].equals(poIdToDelete)) {
                                fileContent.append(line).append("\n"); // Keep this line
                            }
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error reading the file: " + ex.getMessage(),
                    "File Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Write the modified content back to the file
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
                writer.write(fileContent.toString());
                JOptionPane.showMessageDialog(this, "PO entry deleted from the file successfully.");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error writing to the file: " + ex.getMessage(),
                    "File Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "PO entry was not deleted.");
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        // Dispose the current frame (Requisition or PurchaseOrder)
        this.dispose();

        // Create and show the PurschaseManager JFrame again
        PurchaseManager managerFrame = new PurchaseManager();
        managerFrame.setVisible(true);  // Show PurchaseManager

    }//GEN-LAST:event_btn_closeActionPerformed

    private void btn_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_viewActionPerformed

        String filePath = "PurchaseOrder.txt";  // Relative path
        System.out.println("File path: " + filePath);  // Print the file path for debugging

        File file = new File(filePath);
        if (!file.exists()) {
            System.out.println("File does not exist!");
            JOptionPane.showMessageDialog(null, "File does not exist: " + filePath, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            System.out.println("File exists!");
        }

        // DefaultTableModel for tbl_po to populate the data
        DefaultTableModel tableModel = (DefaultTableModel) tbl_po.getModel();
        tableModel.setRowCount(0);  // Clear any existing data in the table

        boolean readPO = false;

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;

            // Read file line by line
            while ((line = br.readLine()) != null) {
                line = line.trim();

                // Detect the start of the Purchase Order section
                if (line.equalsIgnoreCase("# Purchase Order (PO) Data")) {
                    readPO = true;
                    br.readLine(); // Skip the header line (PO ID, Purchase Manager ID, PR ID, Status)
                    continue;
                }

                // Stop reading when the delimiter line is encountered
                if (readPO && line.startsWith("------------------------------------------------------------")) {
                    break; // End of the PO data section
                }

                // Read and process lines within the Purchase Order section
                if (readPO && !line.isEmpty()) {
                    String[] data = line.split(",\\s*"); // Split the line by comma and optional space
                    if (data.length == 4) { // Ensure we have 4 elements (PO ID, Purchase Manager ID, PR ID, Status)
                        tableModel.addRow(data); // Add the row to the table model
                    }
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error reading file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

    }//GEN-LAST:event_btn_viewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchaseOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_view;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_po;
    // End of variables declaration//GEN-END:variables
}
