package POTS;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.util.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class FinanceManager extends javax.swing.JFrame {

    /**
     * Creates new form FinanceManager
     */
    public FinanceManager() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_viewpos = new javax.swing.JButton();
        btn_stockstatus = new javax.swing.JButton();
        btn_payment = new javax.swing.JButton();
        btn_supplierstatus = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        logoutbtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_viewpos.setBackground(new java.awt.Color(102, 102, 102));
        btn_viewpos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_viewpos.setForeground(new java.awt.Color(255, 255, 255));
        btn_viewpos.setText("View Purchase Orders");
        btn_viewpos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_viewpos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_viewposActionPerformed(evt);
            }
        });
        getContentPane().add(btn_viewpos, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 186, 250, 50));

        btn_stockstatus.setBackground(new java.awt.Color(102, 102, 102));
        btn_stockstatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_stockstatus.setForeground(new java.awt.Color(255, 255, 255));
        btn_stockstatus.setText("Check Stock Status\t");
        btn_stockstatus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_stockstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stockstatusActionPerformed(evt);
            }
        });
        getContentPane().add(btn_stockstatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 254, 250, 50));

        btn_payment.setBackground(new java.awt.Color(102, 102, 102));
        btn_payment.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_payment.setForeground(new java.awt.Color(255, 255, 255));
        btn_payment.setText("Make Payment\t");
        btn_payment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_paymentActionPerformed(evt);
            }
        });
        getContentPane().add(btn_payment, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 316, 250, 50));

        btn_supplierstatus.setBackground(new java.awt.Color(102, 102, 102));
        btn_supplierstatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_supplierstatus.setForeground(new java.awt.Color(255, 255, 255));
        btn_supplierstatus.setText("View Supplier Payment Status\t");
        btn_supplierstatus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_supplierstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_supplierstatusActionPerformed(evt);
            }
        });
        getContentPane().add(btn_supplierstatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 378, 250, 50));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Finance Manager");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(174, 36, 310, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Welcome!");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 111, 150, 40));

        logoutbtn.setBackground(new java.awt.Color(255, 204, 0));
        logoutbtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logoutbtn.setText("Logout");
        logoutbtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        logoutbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutbtnActionPerformed(evt);
            }
        });
        getContentPane().add(logoutbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, 90, 30));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/POTS/ll (1).jpg"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_viewposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_viewposActionPerformed
        // Create an instance of Purchase_Orders and make it visible
        Purchase_Orders purchaseOrders = new Purchase_Orders();
        purchaseOrders.setVisible(true);

        // Optionally, hide the Main Dashboard if you want to show only one frame at a time
        this.dispose(); // Closes the Main Dashboard
    }//GEN-LAST:event_btn_viewposActionPerformed

    private void btn_stockstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stockstatusActionPerformed
        // File path of the text file
        String filePath = "PurchaseOrders.txt"; // Only the file name, not the full path

        try {
            // Read the file content
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            String line;
            boolean inStockSection = false;
            List<String[]> stockData = new ArrayList<>(); // To store rows of stock data

            while ((line = reader.readLine()) != null) {
                // Identify the "Stock Status" section in the file
                if (line.trim().equalsIgnoreCase("# Stock Status")) {
                    inStockSection = true;
                    continue;
                }

                // Stop reading when the next section starts
                if (line.startsWith("#") && inStockSection) {
                    break;
                }

                // Add stock details to the list
                if (inStockSection && !line.trim().isEmpty()) {
                    stockData.add(line.split(",")); // Split by comma for table columns
                }
            }

            reader.close();

            // Prepare table data
            if (stockData.size() > 1) {
                // Use the first row as column names
                String[] columnNames = stockData.get(0);

                // Validate that all rows have the same number of columns
                List<String[]> validRows = new ArrayList<>();
                for (int i = 1; i < stockData.size(); i++) {
                    if (stockData.get(i).length == columnNames.length) {
                        validRows.add(stockData.get(i));
                    } else {
                        // Log or handle the case where rows have inconsistent column sizes
                        System.err.println("Skipping malformed row: " + String.join(",", stockData.get(i)));
                    }
                }

                // Convert valid rows to array
                String[][] tableData = validRows.toArray(new String[0][]);

                // Create a panel with search and additional buttons
                JPanel buttonPanel = new JPanel(new FlowLayout());
                JLabel searchLabel = new JLabel("Enter Item Code:");
                JTextField searchField = new JTextField(15);
                JButton searchButton = new JButton("Search");
                JButton viewAllButton = new JButton("View All");
                JButton closeButton = new JButton("Close");

                buttonPanel.add(searchLabel);
                buttonPanel.add(searchField);
                buttonPanel.add(searchButton);
                buttonPanel.add(viewAllButton);
                buttonPanel.add(closeButton);

                // Create JTable and JScrollPane
                JTable table = new JTable(tableData, columnNames);
                JScrollPane scrollPane = new JScrollPane(table);

                // Add components to a dialog
                JPanel mainPanel = new JPanel(new BorderLayout());
                mainPanel.add(buttonPanel, BorderLayout.NORTH);
                mainPanel.add(scrollPane, BorderLayout.CENTER);

                JDialog dialog = new JDialog((JFrame) null, "Stock Status", true);
                dialog.getContentPane().add(mainPanel);
                dialog.setSize(800, 500);
                dialog.setLocationRelativeTo(null);

                // Search button functionality
                searchButton.addActionListener(e -> {
                    String searchText = searchField.getText().trim();
                    if (!searchText.isEmpty()) {
                        // Filter rows based on the search text
                        List<String[]> filteredData = new ArrayList<>();
                        for (String[] row : tableData) {
                            if (row.length > 0 && row[0].trim().equalsIgnoreCase(searchText)) { // Assuming item code is in the first column
                                filteredData.add(row);
                            }
                        }

                        // Update table data
                        if (!filteredData.isEmpty()) {
                            String[][] filteredTableData = filteredData.toArray(new String[0][]);
                            table.setModel(new DefaultTableModel(filteredTableData, columnNames));
                        } else {
                            JOptionPane.showMessageDialog(dialog, "No matching item found!",
                                "Search Result", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(dialog, "Please enter an item code to search.",
                            "Input Error", JOptionPane.WARNING_MESSAGE);
                    }
                });

                // View All button functionality
                viewAllButton.addActionListener(e -> {
                    table.setModel(new DefaultTableModel(tableData, columnNames));
                });

                // Close button functionality
                closeButton.addActionListener(e -> dialog.dispose());

                dialog.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "No stock status information found!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading the file: " + e.getMessage(),
                "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_stockstatusActionPerformed

    private void btn_paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_paymentActionPerformed
        // Create an instance of the Payment JFrame
        Payment paymentFrame = new Payment();
        paymentFrame.setVisible(true);

        // Optionally, close the current dashboard
        this.dispose(); // Closes the Main_Dashboard JFrame

    }//GEN-LAST:event_btn_paymentActionPerformed

    private void btn_supplierstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_supplierstatusActionPerformed
        // File path of the text file
        String filePath = "PurchaseOrders.txt"; // Only the file name, no full path

        // Ensure the file exists
        File file = new File(filePath);
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "The file does not exist at the specified path.",
                "File Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Try reading the file
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean inSupplierSection = false;
            List<String[]> supplierData = new ArrayList<>(); // Store the supplier data rows

            while ((line = reader.readLine()) != null) {
                // Check for the start of the "Supplier Details" section
                if (line.trim().equalsIgnoreCase("# Supplier Details")) {
                    inSupplierSection = true;
                    continue; // Skip the header line
                }

                // Stop reading when the end of the supplier section is encountered
                if (line.trim().equalsIgnoreCase("----------------------------------------------------") && inSupplierSection) {
                    break; // End of Supplier Details section
                }

                // Add the supplier data to the list (if within the supplier section)
                if (inSupplierSection && !line.trim().isEmpty()) {
                    String[] splitLine = line.split(",");
                    if (splitLine.length == 8) {  // Ensure we have 8 columns
                        supplierData.add(splitLine);
                    }
                }
            }

            // Check if we found any supplier data
            if (!supplierData.isEmpty()) {
                // Use the first row for column names (headers)
                String[] columnNames = supplierData.get(0);

                // Extract the actual data (skipping the header row)
                String[][] tableData = supplierData.subList(1, supplierData.size()).toArray(new String[0][]);

                // Create JTable to display the data
                JTable table = new JTable(tableData, columnNames);
                JScrollPane scrollPane = new JScrollPane(table);  // Add scroll pane to table

                // Create buttons for search, view all, and close
                JPanel buttonPanel = new JPanel(new FlowLayout());
                JTextField searchField = new JTextField(15);
                JButton searchButton = new JButton("Search");
                JButton viewAllButton = new JButton("View All");
                JButton closeButton = new JButton("Close");

                buttonPanel.add(new JLabel("Enter Supplier ID:"));
                buttonPanel.add(searchField);
                buttonPanel.add(searchButton);
                buttonPanel.add(viewAllButton);
                buttonPanel.add(closeButton);

                // Create a panel to contain the table and buttons
                JPanel mainPanel = new JPanel(new BorderLayout());
                mainPanel.add(buttonPanel, BorderLayout.NORTH);
                mainPanel.add(scrollPane, BorderLayout.CENTER);

                // Create a dialog to display the table
                JDialog dialog = new JDialog((JFrame) null, "Supplier Details", true);
                dialog.getContentPane().add(mainPanel);
                dialog.setSize(800, 500);
                dialog.setLocationRelativeTo(null);  // Center the dialog

                // Search button functionality
                searchButton.addActionListener(e -> {
                    String searchText = searchField.getText().trim();
                    if (!searchText.isEmpty()) {
                        List<String[]> filteredData = new ArrayList<>();
                        for (String[] row : tableData) {
                            if (row[0].equalsIgnoreCase(searchText)) { // Supplier ID is in the first column
                                filteredData.add(row);
                            }
                        }
                        if (!filteredData.isEmpty()) {
                            String[][] filteredTableData = filteredData.toArray(new String[0][]);
                            table.setModel(new DefaultTableModel(filteredTableData, columnNames));
                        } else {
                            JOptionPane.showMessageDialog(dialog, "No supplier found with the ID: " + searchText,
                                "Search Result", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(dialog, "Please enter a Supplier ID to search.",
                            "Input Error", JOptionPane.WARNING_MESSAGE);
                    }
                });

                // View All button functionality
                viewAllButton.addActionListener(e -> {
                    table.setModel(new DefaultTableModel(tableData, columnNames));
                });

                // Close button functionality
                closeButton.addActionListener(e -> dialog.dispose());

                // Show the dialog with the table and buttons
                dialog.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "No supplier data found!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading the file: " + e.getMessage(),
                "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_supplierstatusActionPerformed

    private void logoutbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutbtnActionPerformed
        this.dispose();//closing the current form
        new MainMenu().setVisible(true);//opening the MainMenu form
    }//GEN-LAST:event_logoutbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinanceManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinanceManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinanceManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinanceManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FinanceManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_payment;
    private javax.swing.JButton btn_stockstatus;
    private javax.swing.JButton btn_supplierstatus;
    private javax.swing.JButton btn_viewpos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton logoutbtn;
    // End of variables declaration//GEN-END:variables
}
