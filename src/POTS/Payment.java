package POTS;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class Payment extends javax.swing.JFrame {

    /**
     * Creates new form Payment
     */
    public Payment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_payment = new javax.swing.JTable();
        lbl_tilep = new javax.swing.JLabel();
        btn_close2 = new javax.swing.JButton();
        btn_view2 = new javax.swing.JButton();
        txt_poid = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_clear = new javax.swing.JButton();
        btn_search = new javax.swing.JButton();
        txt_iteamid = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        btn_update.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_update.setText("Update");
        btn_update.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        btn_update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        tbl_payment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbl_payment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PO ID", "Iteam ID", "Supplier ID", "Quantity", "Payment Date", "Status"
            }
        ));
        jScrollPane1.setViewportView(tbl_payment);

        lbl_tilep.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lbl_tilep.setText("Make Payment");

        btn_close2.setBackground(new java.awt.Color(204, 153, 0));
        btn_close2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_close2.setText("Close");
        btn_close2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btn_close2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_close2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_close2ActionPerformed(evt);
            }
        });

        btn_view2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_view2.setText("View All");
        btn_view2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        btn_view2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_view2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_view2ActionPerformed(evt);
            }
        });

        txt_poid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_poidActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("PO ID");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Iteam ID");

        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        txt_iteamid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_iteamidActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Paid", "Unpaid", "Pending" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Status Filter");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/POTS/payment-method (1).png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(btn_search)
                .addGap(29, 29, 29)
                .addComponent(btn_clear)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txt_poid, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel2)
                                .addGap(28, 28, 28)
                                .addComponent(txt_iteamid, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbl_tilep)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(btn_close2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_view2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_update, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)))
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_tilep)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txt_poid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(txt_iteamid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_search)
                            .addComponent(btn_clear))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_view2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_close2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(18, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // Get the selected row in the table
        int selectedRow = tbl_payment.getSelectedRow();
        if (selectedRow != -1) {
            // Get the PO_ID from the selected row (assuming the first column holds PO_ID)
            String poId = tbl_payment.getValueAt(selectedRow, 0).toString();
            String currentStatus = tbl_payment.getValueAt(selectedRow, tbl_payment.getColumnCount() - 1).toString();

            // Define the options for the new status
            String[] options = {"Unpaid", "Paid", "Pending"};

            // Show a pop-up dialog for selecting the new status
            int choice = JOptionPane.showOptionDialog(this,
                "Select the new status:",
                "Update Status",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

            if (choice >= 0) { // If a valid option is chosen
                String newStatus = options[choice];

                // Check if the current status is already the selected new status
                if (currentStatus.equals(newStatus)) {
                    // Show a message that the status is already the selected one
                    JOptionPane.showMessageDialog(this,
                        "This payment is already marked as '" + newStatus + "'.",
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE);
                } else {
                    // Specify the relative file path
                    File file = new File("PurchaseOrders.txt");  // Just the file name, assuming it's in the current working directory

                    try {
                        // Read the content of the file
                        List<String> lines = new ArrayList<>();
                        BufferedReader reader = new BufferedReader(new FileReader(file));
                        String line;
                        boolean isPaymentsSection = false;

                        // Read all lines from the file
                        while ((line = reader.readLine()) != null) {
                            // Check for the start of the "Payments" section
                            if (line.equals("# Payments")) {
                                isPaymentsSection = true;
                            }

                            // Check for the end of the "Payments" section
                            if (isPaymentsSection && line.equals("-----------------------------------")) {
                                isPaymentsSection = false;
                            }

                            // If within the "Payments" section, update the relevant row
                            if (isPaymentsSection && line.startsWith(poId)) {
                                String[] row = line.split(",");
                                row[row.length - 1] = newStatus; // Update the status column
                                line = String.join(",", row);  // Rebuild the updated line
                            }

                            // Add the line to the list
                            lines.add(line);
                        }
                        reader.close();

                        // Write the modified content back to the file
                        BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                        for (String updatedLine : lines) {
                            writer.write(updatedLine);
                            writer.newLine(); // Write a new line after each row
                        }
                        writer.close();

                        // Update the table to reflect the changes
                        tbl_payment.setValueAt(newStatus, selectedRow, tbl_payment.getColumnCount() - 1);

                        // Show a success message
                        JOptionPane.showMessageDialog(this,
                            "Status successfully updated to '" + newStatus + "'.",
                            "Success",
                            JOptionPane.INFORMATION_MESSAGE);

                    } catch (IOException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this,
                            "Error updating the file.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            // If no row is selected, show a warning message
            JOptionPane.showMessageDialog(this,
                "Please select a row to update.",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_close2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_close2ActionPerformed
        FinanceManager mainDashboard = new FinanceManager();
        mainDashboard.setVisible(true);

        // Close the current Purchase Orders window
        this.dispose();
    }//GEN-LAST:event_btn_close2ActionPerformed

    private void btn_view2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_view2ActionPerformed
        try {
            // Specify the file path (using relative path)
            File file = new File("PurchaseOrders.txt");  // No need for the full path, just the file name

            // Create a BufferedReader to read the file
            BufferedReader reader = new BufferedReader(new FileReader(file));

            String line;
            boolean isPaymentsSection = false;
            List<String[]> paymentData = new ArrayList<>();

            // Read the file line by line
            while ((line = reader.readLine()) != null) {
                // Check for the start of the "Payments" section
                if (line.equals("# Payments")) {
                    isPaymentsSection = true; // Start reading the payments section
                    continue;
                }

                // Stop reading if the section ends
                if (isPaymentsSection && line.equals("-----------------------------------")) {
                    isPaymentsSection = false; // End of the payments section
                    break;
                }

                // If within the "Payments" section, read the data
                if (isPaymentsSection && !line.trim().isEmpty()) {
                    // Split the line into data fields (assuming CSV format)
                    String[] paymentDetails = line.split(",");
                    paymentData.add(paymentDetails);
                }
            }

            // Close the reader
            reader.close();

            // Update the table with the payment data
            DefaultTableModel model = (DefaultTableModel) tbl_payment.getModel();

            // Clear existing rows in the table
            model.setRowCount(0);

            // Add each row of payment data to the table
            for (String[] payment : paymentData) {
                model.addRow(payment);
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error reading the file.",
                "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btn_view2ActionPerformed

    private void txt_poidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_poidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_poidActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        // Check if the text fields are already empty
        if (txt_poid.getText().isEmpty() && txt_iteamid.getText().isEmpty()) {
            // Show a navigation message if the fields are empty
            JOptionPane.showMessageDialog(this, "The text fields are already empty!",
                "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Clear the text fields
            txt_poid.setText("");
            txt_iteamid.setText("");

            // Optionally, clear the table data
            DefaultTableModel tableModel = (DefaultTableModel) tbl_payment.getModel();
            tableModel.setRowCount(0);

            // Show a confirmation message
            JOptionPane.showMessageDialog(this, "Inputs cleared successfully!",
                "Clear", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btn_clearActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
       String filePath = "PurchaseOrders.txt"; // Use a relative path for the file

try {
    BufferedReader reader = new BufferedReader(new FileReader(filePath));
    String line;
    boolean inPaymentsSection = false;
    List<String[]> paymentData = new ArrayList<>();

    // Read lines from the file and parse the payment data
    while ((line = reader.readLine()) != null) {
        if (line.trim().equalsIgnoreCase("# Payments")) {
            inPaymentsSection = true;
            continue;
        }
        if (line.startsWith("#") && inPaymentsSection) break;

        // Process the lines after # Payments and split by commas
        if (inPaymentsSection && !line.trim().isEmpty()) {
            String[] columns = line.split(",");

            // Skip rows with less than 2 columns (i.e., missing POID or ItemID)
            if (columns.length < 2) {
                System.out.println("Skipping malformed line (less than 2 columns): " + line);
                continue;
            }

            paymentData.add(columns);
        }
    }
    reader.close();

    // Get search terms from the text fields
    String searchPOID = txt_poid.getText().trim();
    String searchItemID = txt_iteamid.getText().trim();

    // Validate that at least one search term is provided
    if (searchPOID.isEmpty() && searchItemID.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter POID or ItemID to search.",
                                      "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Filter data based on POID or ItemID
    List<String[]> filteredData = new ArrayList<>();
    for (String[] row : paymentData) {
        // Trim and compare POID and ItemID
        boolean matchesPOID = !searchPOID.isEmpty() && row[0].trim().equalsIgnoreCase(searchPOID);
        boolean matchesItemID = !searchItemID.isEmpty() && row[1].trim().equalsIgnoreCase(searchItemID);

        // Add the row to filteredData if either POID or ItemID matches
        if (matchesPOID || matchesItemID) {
            filteredData.add(row);
        }
    }

    // Display filtered data in the table
    if (!filteredData.isEmpty()) {
        String[] columnNames = {"POID", "ItemID", "SupplierID", "Quantity", "Date", "Status"};
        String[][] tableData = filteredData.toArray(new String[0][]);

        DefaultTableModel tableModel = (DefaultTableModel) tbl_payment.getModel();
        tableModel.setRowCount(0);  // Clear existing rows

        // Add the filtered rows to the table
        for (String[] rowData : tableData) {
            tableModel.addRow(rowData);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No matching records found.", 
                                      "Search Result", JOptionPane.INFORMATION_MESSAGE);
    }

} catch (IOException e) {
    JOptionPane.showMessageDialog(this, "Error reading the file: " + e.getMessage(),
                                  "File Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_btn_searchActionPerformed

    private void txt_iteamidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_iteamidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_iteamidActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // Get the selected status from the combo box
        String selectedStatus = jComboBox2.getSelectedItem().toString();

        // Specify the file path (relative path)
        File file = new File("PurchaseOrders.txt");

        try {
            // Read the content of the file
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            boolean isPaymentsSection = false;

            // Prepare a list to hold rows that match the selected status
            List<String[]> filteredData = new ArrayList<>();

            // Read all lines from the file
            while ((line = reader.readLine()) != null) {
                // Check for the start of the "Payments" section
                if (line.equals("# Payments")) {
                    isPaymentsSection = true;
                    continue; // Skip the header line
                }

                // Check for the end of the "Payments" section
                if (isPaymentsSection && line.equals("-----------------------------------")) {
                    isPaymentsSection = false;
                }

                // If within the "Payments" section, filter by status
                if (isPaymentsSection && line.startsWith("PO")) {
                    String[] row = line.split(",");
                    String status = row[row.length - 1].trim(); // Get the status column

                    if (selectedStatus.equals("All") || status.equalsIgnoreCase(selectedStatus)) {
                        filteredData.add(row); // Add matching row to filtered data
                    }
                }
            }
            reader.close();

            // Update the table with filtered data
            DefaultTableModel model = (DefaultTableModel) tbl_payment.getModel();
            model.setRowCount(0); // Clear existing rows

            // Add filtered rows to the table
            for (String[] row : filteredData) {
                model.addRow(row);
            }

            // Show a message if no rows match the filter
            if (filteredData.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No records found for status: " + selectedStatus,
                    "Information", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error reading the file.",
                "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Payment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_close2;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton btn_update;
    private javax.swing.JButton btn_view2;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_tilep;
    private javax.swing.JTable tbl_payment;
    private javax.swing.JTextField txt_iteamid;
    private javax.swing.JTextField txt_poid;
    // End of variables declaration//GEN-END:variables
}
